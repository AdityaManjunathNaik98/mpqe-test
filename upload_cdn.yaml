name: Upload to CDN
description: Uploads a pickle file to CDN and returns the accessible URL.
inputs:
  - name: pickle_file
    type: Dataset
    description: Path to the pickle file to upload from previous step.
  - name: bearer_token_file
    type: String
    description: Path to file containing the bearer token for authentication.
outputs:
  - name: output_url_file
    type: String
    description: Path where the CDN URL will be saved.
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        set -e
        python3 -m pip install --quiet requests

        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import subprocess
        import json
        import os
        import uuid

        # Parse command line arguments
        parser = argparse.ArgumentParser(description="Upload a single pickle file to CDN.")
        parser.add_argument('--pickle_file', type=str, required=True, 
                           help='Path to the pickle file to upload.')
        parser.add_argument('--output_url_file', type=str, required=True, 
                           help='Path to save the resulting CDN URL.')
        parser.add_argument('--bearer_token_file', type=str, required=True, 
                           help='Path to file containing the bearer token.')
        args = parser.parse_args()

        # Reads the authentication token and sets the upload URL
        with open(args.bearer_token_file, 'r') as f:
            bearer_token = f.read().strip()

        upload_url = "https://ig.mobiusdtaas.ai/mobius-content-service/v1.0/content/upload?filePathAccess=private&filePath=%2FRGCN%2Ftest%2F"

        # Handles the file upload process using curl and processes the response
        def upload_pickle_to_cdn(pickle_file_path, output_url_path):
            """
            Uploads a pickle file to CDN and saves the resulting URL.
            
            Args:
                pickle_file_path: Path to the pickle file to upload
                output_url_path: Where to save the CDN URL result
            
            Returns:
                The full CDN URL for the uploaded file
            """
            
            # Generate a unique filename for the CDN
            original_filename = os.path.basename(pickle_file_path)
            unique_id = str(uuid.uuid4())[:8]  # Short UUID for uniqueness
            cdn_filename = f"pickle_{unique_id}_{original_filename}"
            
            print(f"Uploading pickle file: {pickle_file_path}")
            print(f"CDN filename will be: {cdn_filename}")
            
            # Build the curl command for file upload
            curl_command = [
                "curl",
                "--location", upload_url,
                "--header", f"Authorization: Bearer {bearer_token}",
                "--form", f"file=@{pickle_file_path}",  # @ symbol tells curl to read from file
                "--fail",        # Fail silently on HTTP errors
                "--show-error"   # Show error details if --fail triggers
            ]
            
            print(f"Executing upload command...")
            
            try:
                # Execute the curl command and capture output
                process = subprocess.run(
                    curl_command,
                    capture_output=True,  # Capture both stdout and stderr
                    check=True           # Raise exception if command fails
                )
                
                print("Upload successful:")
                response_text = process.stdout.decode('utf-8')
                print(f"Server response: {response_text}")
                
                # Parse the JSON response to extract CDN URL
                response_json = json.loads(response_text)
                relative_cdn_url = response_json.get("cdnUrl")
                
                if not relative_cdn_url:
                    raise ValueError("CDN response missing 'cdnUrl' field")
                
                # Construct the full CDN URL
                full_cdn_url = f"https://cdn.mobiusdtaas.ai{relative_cdn_url}"
                print(f"File available at: {full_cdn_url}")
                
                # Save the URL to the output file
                output_dir = os.path.dirname(output_url_path)
                if output_dir:
                    os.makedirs(output_dir, exist_ok=True)
                
                with open(output_url_path, "w") as f:
                    f.write(full_cdn_url)
                
                print(f"CDN URL saved to: {output_url_path}")
                return full_cdn_url
                
            except subprocess.CalledProcessError as e:
                print("Upload failed!")
                print(f"Exit code: {e.returncode}")
                print(f"Error output: {e.stderr.decode('utf-8')}")
                raise
            except json.JSONDecodeError as e:
                print("Failed to parse server response as JSON")
                print(f"Response was: {process.stdout.decode('utf-8')}")
                raise
            except Exception as e:
                print(f"Unexpected error: {e}")
                raise

        # Validates the input file exists and performs the upload
        # Validate that the pickle file exists
        if not os.path.exists(args.pickle_file):
            raise FileNotFoundError(f"Pickle file not found: {args.pickle_file}")
        
        # Check file size (optional - helps catch issues early)
        file_size = os.path.getsize(args.pickle_file)
        print(f"Pickle file size: {file_size:,} bytes ({file_size/1024/1024:.2f} MB)")
        
        if file_size == 0:
            raise ValueError("Pickle file is empty")
        
        # Perform the upload
        try:
            cdn_url = upload_pickle_to_cdn(args.pickle_file, args.output_url_file)
            print("=" * 50)
            print("SUCCESS!")
            print(f"Your pickle file is now available at:")
            print(f"{cdn_url}")
            print("=" * 50)
            
        except Exception as e:
            print("=" * 50)
            print("FAILED!")
            print(f"Error: {e}")
            print("=" * 50)
            raise

    args:
      - --pickle_file
      - { inputValue: pickle_file }
      - --bearer_token_file
      - { inputValue: bearer_token_file }
      - --output_url_file
      - { outputPath: output_url_file }